
package finalprojectfop;

import finalprojectfop.gfx.Assets;
import finalprojectfop.gfx.ImageLoader;
import java.awt.Graphics;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


public class Game extends Canvas implements Runnable, KeyListener{
    
    private Display display;
    public int width, height;
    public String title;
    private Thread thread;
    private boolean running = false;
    private boolean gameStarted;
    
    private BufferStrategy bs;
    private Graphics g;
    private BufferedImage background;
    private BufferedImage background2;
    private BufferedImage background3;
    private BufferedImage background4;
    
    public static Menu menu;
    public static SelectLevel selectLevel;
    public static Storyline storyLine;
    public static StoryLine2 storyLine2;
    public static STATE State = STATE.MENU;
    private World world;
    private Hour hour;
    private Weapon weapon;
    private ArmouredTitan armouredtitan;
    private ColossusTitan colossustitan;
    private Controller c;
    
    JTextField field1 = new JTextField();
    JTextField field2 = new JTextField();
    JTextField field3 = new JTextField();
    JTextField field4 = new JTextField();
    
    public Game(String title, int width, int height) {
        this.width = width;
        this.height = height;
        this.title = title;
        display = new Display(title, width, height);
    }
    
    
    //Implementing COINS
    private int totalCoin = 45; //initial coin
    static double fps = 0.35;
    static double delta = 0;
    static long now;
    static long lastTime = System.nanoTime();
    
    //Get current value of coin
    public int getTotalCoin() {
        return totalCoin;
    }
    //Updates value of coin
    public int setTotalCoin(int coinChg) {
        double timePerTick = 1000000000 / fps;
        now  = System.nanoTime();
        delta += (now - lastTime) / timePerTick;
        lastTime = now;
            if(delta >= 1) {
                coinChg += 5;
                totalCoin = totalCoin + coinChg ;
                delta--;
            }  
            
        //PURCHASE DEDUCTION FROM USER INPUT
        
        return totalCoin ;   
    }
            //Displaying coins to the screeen
    public void coinDisplay(Graphics g) {
        Font fnt = new Font("consolas", Font.BOLD, 15);
        g.setFont(fnt);
        g.setColor(Color.white);
        g.drawString("coins: "+setTotalCoin(0), 12, 12);        
    }
    
    
    
    //HP POINTS
        //initialize every wall with 50 HP
    private static final int[] hp = {50,50,50,50,50,50,50,50,50,50};
    
    //mutator for how many hp to add/remove for each wall
    public int setHp(int column,int hpChg) {
        hp[column] = hp[column] + hpChg;   
        //UPGRADING HP ACCORDING TO THE USER INPUT
//        hpChg = Integer.parseInt(getValue4());
//        String[] chr = getValue3().split("(?!^)");
//        for (int i = 0; i < chr.length; i++) {
//            if (hp[i] == Integer.parseInt(chr[i])) {
//                hp[i] = 50 + hpChg;
//            }
//        }
        return hp[column];
    }
    //accessor for getting hp value for each wall
    public static int getHp(int column) {
        return hp[column];
    }
    public void hpDisplay(Graphics g) {
            int x = 570;
            int y = -25; 
        Font fnt = new Font("consolas", Font.BOLD, 10);
        g.setFont(fnt);
        g.setColor(Color.white);
        for (int i=0; i<hp.length; i++) {
            y += 50;
            g.drawString(""+setHp(i, 0), x, y);
        }
    }
    
    //logic to lose the game if one of the wall HP falls to zero or below.
    public void GameOver() {
        for (int i = 0; i < 10; i++) {
            if (hp[i] <= 0) {
                JOptionPane.showMessageDialog(null, "Game Over!");
                System.exit(0);
            }
        }        
    }    
    
    
    //DIALOG BOX for the user input
    Object[] fields = {
    "Choose the weapon(s) you would like to upgrade. (Type a string of integer or leave it empty to skip)", field1,
    "No weapons on the wall. Choose the weapon type you want to build on the wall (Type a string of integer [0 to 4])\n" + "0 = no weapon\n" + "1 = crossbow: 5 coins\n" + "2 = guns: 10 coins\n" + "3 = catapult: 15 coins\n" + "4 = cannon", field2,
    "Choose the wall(s) that you would like to upgrade. (Type a string of integer)", field3,
    "How many HP do you want to add up to the wall(s)? Current coin number: "+ getTotalCoin(), field4, 
    };
    String value1, value2, value3, value4;    
    int result;
    public void displayDialogBox() { 
        result = JOptionPane.showConfirmDialog(null, fields, "Input", JOptionPane.OK_OPTION); 
    } 
    public String getValue1() {
        if (result == JOptionPane.OK_OPTION) {
             value1 = field1.getText();
        }
        return value1;
    }
    public String getValue2() {
        if (result == JOptionPane.OK_OPTION) {
             value1 = field1.getText();
        }
        return value1;
    }
    public String getValue3() {
        if (result == JOptionPane.OK_OPTION) {
             value1 = field1.getText();
        }
        return value1;
    }
    public String getValue4() {
        if (result == JOptionPane.OK_OPTION) {
             value1 = field1.getText();
        }
        return value1;
    }
     
    
    

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            gameStarted = true;
        } else if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            c.addBullet(new Bullet(500, 100, this));
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
       
    }
    
    public static enum STATE {
        MENU,
        STORY1,
        STORY2,
        LEVEL,
        GAME,
        HARDGAME
    }
    
    private void init() {
        gameStarted = false;
        Assets.init();
        background = ImageLoader.loadImage("/images/image4.jpg");
        background2 = ImageLoader.loadImage("/images/image3.jpg");
        background3 = ImageLoader.loadImage("/images/story1.jpg");
        background4 = ImageLoader.loadImage("/images/story2.jpg");
        
        menu = new Menu();
        selectLevel = new SelectLevel();
        storyLine = new Storyline();
        storyLine2 = new StoryLine2();
        world = new World("src/finalprojectfop/resources/worlds/world1.txt");
        hour = new Hour();
        weapon = new Weapon(3);
        armouredtitan = new ArmouredTitan();
        colossustitan = new ColossusTitan();
        c = new Controller(this);

        display.getCanvas().addMouseListener(new MouseInput());
        display.getCanvas().addKeyListener(this);
    }
    
    
    private void tick() {
        
    }
    
    private void render() {
        bs = display.getCanvas().getBufferStrategy();
        if (bs == null) {
            display.getCanvas().createBufferStrategy(3);
            return;
        } 
        g = bs.getDrawGraphics();
        g.getColor();
        g.fillRect(0, 0,width, height);
        //Clear Screen
        g.clearRect(0, 0, width, height);
        
       
        
        
        if(null != State) switch (State) {
            case GAME:
                world.render(g);
                coinDisplay(g);
                hpDisplay(g);
//                hp.render(g);
//                hp.tick();
//                coin.render(g);
//                coin.tick();
                hour.render(g);
                hour.start(); 
                hour.tick();
                weapon.init();
                weapon.render(g);
                armouredtitan.render(g);
                colossustitan.render(g);
                c.render(g);
                c.tick();
                //dialogbox.render();
    
         if (Hour.getHour() == 1) {
             displayDialogBox();
        }

    
    
                break;
            
            case HARDGAME:
                world.render(g);
//                hp.render(g);
//                hp.tick();
//                coin.render(g);
//                coin.tick();
                hour.render(g);
                hour.start();
               // hour.tick();
  //              weapon.init();
   //             weapon.render(g);
                //armouredtitan.tick();
                armouredtitan.render(g);
//                c.render(g);
//                c.tick();
                break;
            case MENU:
                g.drawImage(background, 0, 0, this);
                menu.render(g);
                break;
            case STORY1:
                g.drawImage(background3, 0, 0, this);
                storyLine.render(g);
                break;
            case STORY2:
                g.drawImage(background4, 0, 0, this);
                storyLine2.render(g);
                break;
            case LEVEL:
                g.drawImage(background2, 0, 0, this);
                selectLevel.render(g);
                break;
            default:
                break;
        }
        g.dispose();
        bs.show();
    }
    
    @Override
    public void run() {
        init();
        
        int fps = 60;
        double timePerTick = 1000000000 / fps;
        double delta = 0;
        long now;
        long lastTime = System.nanoTime();
        
        
        while(running) {
            now  = System.nanoTime();
            delta += (now - lastTime) / timePerTick;
            lastTime = now;
            
            if(delta >= 1) {
            tick();
            render();
            delta--;
            }
        }
        
        stop();
    }
    
    public synchronized void start() {
        if (running) 
            return;
        running = true;
        thread = new Thread(this);
        thread.start();
    }
    
    public synchronized void stop() {
        if (!running)
            return;
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
        }
        System.exit(1);
    }
}
