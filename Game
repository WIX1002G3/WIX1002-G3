
import finalprojectfop.gfx.Assets;
import finalprojectfop.gfx.ImageLoader;
import java.awt.Graphics;
import java.awt.Canvas;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

public class Game extends Canvas implements Runnable{
    
    private Display display;
    public int width, height;
    public String title;
    private Thread thread;
    private boolean running = false;
    
    private BufferStrategy bs;
    private Graphics g;
    private BufferedImage background;
    private BufferedImage background2;
    private BufferedImage background3;
    private BufferedImage background4;
    
    public static Menu menu;
    public static SelectLevel selectLevel;
    public static Storyline storyLine;
    public static StoryLine2 storyLine2;
    public static STATE State = STATE.MENU;
    private World world;
    
    public Game(String title, int width, int height) {
        this.width = width;
        this.height = height;
        this.title = title;
        display = new Display(title, width, height);
    }
    
    public static enum STATE {
        MENU,
        STORY1,
        STORY2,
        LEVEL,
        GAME
    }
    
    private void init() {
        display = new Display(title, width, height);
        Assets.init();
        background = ImageLoader.loadImage("/images/image4.jpg");
        background2 = ImageLoader.loadImage("/images/image3.jpg");
        background3 = ImageLoader.loadImage("/images/story1.jpg");
        background4 = ImageLoader.loadImage("/images/story2.jpg");
        
        menu = new Menu();
        selectLevel = new SelectLevel();
        storyLine = new Storyline();
        storyLine2 = new StoryLine2();
        world = new World("src/finalprojectfop/resources/worlds/world1.txt");
        display.getCanvas().addMouseListener(new MouseInput());
    }
    
    private void tick() {
        
    }
    
    private void render() {
        bs = display.getCanvas().getBufferStrategy();
        if (bs == null) {
            display.getCanvas().createBufferStrategy(3);
            return;
        } 
        g = bs.getDrawGraphics();
        g.getColor();
        g.fillRect(0, 0,width, height);
        //Clear Screen
        g.clearRect(0, 0, width, height);

        if(null != State) switch (State) {
            case GAME:
                world.render(g);
                break;
            case MENU:
                g.drawImage(background, 0, 0, this);
                menu.render(g);
                break;
            case STORY1:
                g.drawImage(background3, 0, 0, this);
                storyLine.render(g);
                break;
            case STORY2:
                g.drawImage(background4, 0, 0, this);
                storyLine2.render(g);
                break;
            case LEVEL:
                g.drawImage(background2, 0, 0, this);
                selectLevel.render(g);
                break;
            default:
                break;
        }
        g.dispose();
        bs.show();
    }
    
    @Override
    public void run() {
        init();
        while(running) {
            //game loop
            tick();
            render();
        }
        stop();
    }
    
    public synchronized void start() {
        if (running) 
            return;
        running = true;
        thread = new Thread(this);
        thread.start();
    }
    
    public synchronized void stop() {
        if (!running)
            return;
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
        }
        System.exit(1);
    }
}

