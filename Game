import finalprojectfop.gfx.ImageLoader;
import java.awt.Graphics;
import java.awt.Canvas;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

public class Game extends Canvas implements Runnable{
    
    private Display display;
    public int width, height;
    public String title;
    private Thread thread;
    private boolean running = false;
    
    private BufferStrategy bs;
    private Graphics g;
    private BufferedImage background;
    private BufferedImage background2;
    
    private Menu menu;
    private SelectLevel selectLevel;
    public static STATE State = STATE.MENU;
    
    public Game(String title, int width, int height) {
        this.width = width;
        this.height = height;
        this.title = title;
        display = new Display(title, width, height);
    }
    
    public static enum STATE {
        MENU,
        LEVEL,
        GAME
    };
    
    private void init() {
        display = new Display(title, width, height);
        background = ImageLoader.loadImage("/images/image4.jpg");
        background2 = ImageLoader.loadImage("/images/image3.jpg");
        menu = new Menu();
        selectLevel = new SelectLevel();
        display.getCanvas().addMouseListener(new MouseInput());
    }
    
    private void update() {
        
    }
    
    private void render() {
        bs = display.getCanvas().getBufferStrategy();
        if (bs == null) {
            display.getCanvas().createBufferStrategy(3);
            return;
        } 
        g = bs.getDrawGraphics();
        g.getColor();
        g.fillRect(0, 0,width, height);
        //Clear Screen
        g.clearRect(0, 0, width, height);
        //
        //g.drawImage(testImage, 50, 200, this);
        if(State == STATE.GAME) {
            
        } else if (State == STATE.MENU) {
            g.drawImage(background, 0, 0, this);
            menu.render(g);
        } else if(State == STATE.LEVEL) {
            g.drawImage(background2, 0, 0, this);
            selectLevel.render(g);
        }
        g.dispose();
        bs.show();
    }
    
    @Override
    public void run() {
        init();
        while(running) {
            //game loop
            update();
            render();
        }
        stop();
    }
    
    public synchronized void start() {
        if (running) 
            return;
        running = true;
        thread = new Thread(this);
        thread.start();
    }
    
    public synchronized void stop() {
        if (!running)
            return;
        running = false;
        try {
            thread.join();
        } catch (InterruptedException e) {
        }
        System.exit(1);
    }
}
